#include<iostream>
#include<cassert>
using namespace std;

template <class type,int dim>
class Point{
	public:
		Point();
		Point(type coords[dim]){
			for(int i = 0;i<dim;i++)
			{
				_coords[i] = coords[i];
			}
		}
		
		type& operator[](int index){
			assert(index<dim&&index>=0);
			return _coords[index];
		} 
		
		type& operator[](int index) const{
			assert(index<dim&&index>=0);
			return _coords[index];
		}
		
		void print(){
			cout<<"(";
			for(int index = 0;index<dim-1;index++)
			{
				cout<<_coords[index]<<",";
			}
			cout<<_coords[dim-1]<<")"<<endl;
		}
	private: 
		type _coords[dim];
};


int main(){
	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
	Point<int,10> *P = new Point<int,10>(arr);
	P->print();
	return 0;
}
